{"version":3,"sources":["api/movies-api.js","views/HomePage.jsx"],"names":["axios","defaults","baseURL","params","api_key","language","getMoviesTrending","a","url","data","results","alert","getSerchMovies","query","page","response","movie_id","propTypes","PropTypes","string","isRequired","number","api","getMovieDetails","getMovieCredits","getMoviesReviews","HomePage","state","trending","src","location","useLocation","fetchTrending","then","setState","this","props","className","map","id","poster_path","title","vote_average","to","pathname","from","alt","React","Component","withRouter"],"mappings":"wMAMAA,IAAMC,SAASC,QAHE,gCAIjBF,IAAMC,SAASE,OAAS,CACtBC,QAJc,mCAKdC,SAAU,SAIZ,IAAMC,EAAiB,uCAAG,gCAAAC,EAAA,sEAEhBC,EAAM,CAAEA,IAAI,sBAFI,SAGCR,IAAMQ,GAHP,uBAGdC,EAHc,EAGdA,KAHc,kBAIfA,EAAKC,SAJU,uCAMtBC,MAAM,EAAD,IANiB,kBAOf,IAPe,yDAAH,qD,SAYRC,E,gFAAf,WAA8BC,EAAOC,GAArC,iBAAAP,EAAA,sEAEUC,EAAM,CAAEA,IAAK,eAAgBL,OAAQ,CAAEU,QAAOC,SAFxD,SAG2Bd,IAAMQ,GAHjC,cAGUO,EAHV,yBAIWA,GAJX,uCAMIJ,MAAM,EAAD,IANT,kBAOW,IAPX,0D,kEAiBA,WAA+BK,GAA/B,mBAAAT,EAAA,sEAEUC,EAAM,CAAEA,IAAI,SAAD,OAAWQ,IAFhC,SAG2BhB,IAAMQ,EAAKQ,GAHtC,uBAGYP,EAHZ,EAGYA,KAHZ,kBAIWA,GAJX,uCAMIE,MAAM,EAAD,IANT,kBAOW,IAPX,0D,kEAYA,WAA+BK,GAA/B,iBAAAT,EAAA,sEAEUC,EAAM,CAAEA,IAAI,SAAD,OAAWQ,EAAX,aACXD,EAAWf,IAAMQ,EAAKQ,GAHhC,kBAIWD,GAJX,uCAMIJ,MAAM,EAAD,IANT,kBAOW,IAPX,0D,kEAYA,WAAgCK,GAAhC,iBAAAT,EAAA,sEAEUC,EAAM,CAAEA,IAAI,SAAD,OAAWQ,EAAX,aACXD,EAAWf,IAAMQ,EAAKQ,GAHhC,kBAIWD,GAJX,uCAMIJ,MAAM,EAAD,IANT,kBAOW,IAPX,0D,sBA9BAC,EAAeK,UAAY,CACzBJ,MAAOK,IAAUC,OAAOC,WACxBN,KAAMI,IAAUG,OAAOD,YAuCzB,IAAME,EAAM,CACVhB,oBACAM,iBACAW,gB,4CACAC,gB,4CACAC,iB,6CAGaH,O,gICjFTI,E,4MACJC,MAAQ,CACNC,SAAU,GACVC,IAAK,kCACLC,SAAUC,K,EAOZC,cAAgB,WACdV,IAAIhB,oBAAoB2B,MAAK,SAAAvB,GAC3B,EAAKwB,SAAS,CAAEN,SAAS,YAAKlB,S,uDANlC,WACEyB,KAAKH,kB,oBASP,WAAU,IAAD,EACmBG,KAAKR,MAAvBC,EADD,EACCA,SAAUC,EADX,EACWA,IACVC,EAAaK,KAAKC,MAAlBN,SAER,OACE,sBAAKO,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,qCACA,oBAAIA,UAAU,YAAd,SACGT,EAASU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,aAA3B,OACZ,cAAC,IAAD,CAEEC,GAAI,CACFC,SAAS,WAAD,OAAaL,GACrBZ,MAAO,CAAEkB,KAAMf,EAASc,WAJ5B,SAOE,qBAAIP,UAAU,YAAd,UACE,qBACEA,UAAU,aACVR,IAAG,UAAKA,GAAL,OAAWW,GACdM,IAAKL,IAEP,oBAAGJ,UAAU,eAAb,cAA8BI,KAC9B,mBAAGJ,UAAU,gBAAb,SACE,sBAAMA,UAAU,SAAhB,SAA0BK,UAdzBH,e,GA3BIQ,IAAMC,WAoDdC,sBAAWvB","file":"static/js/5.f3d76703.chunk.js","sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '523a15ded98cd05fab36993344058e43';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\n// список популярных фильмов на сегодня для создания коллекции на главной странице\nconst getMoviesTrending = async () => {\n  try {\n    const url = { url: `trending/movie/day` };\n    const { data } = await axios(url);\n    return data.results;\n  } catch (error) {\n    alert(error);\n    return [];\n  }\n};\n\n// поиск кинофильма по ключевому слову на странице фильмов\nasync function getSerchMovies(query, page) {\n  try {\n    const url = { url: 'search/movie', params: { query, page } };\n    const response = await axios(url);\n    return response;\n  } catch (error) {\n    alert(error);\n    return [];\n  }\n}\n\ngetSerchMovies.propTypes = {\n  query: PropTypes.string.isRequired,\n  page: PropTypes.number.isRequired,\n};\n\n// запрос полной информации о фильме для страницы кинофильма\nasync function getMovieDetails(movie_id) {\n  try {\n    const url = { url: `movie/${movie_id}` };\n    const { data } = await axios(url, movie_id);\n    return data;\n  } catch (error) {\n    alert(error);\n    return [];\n  }\n}\n\n// запрос информации о актёрском составе для страницы кинофильма\nasync function getMovieCredits(movie_id) {\n  try {\n    const url = { url: `movie/${movie_id}/credits` };\n    const response = axios(url, movie_id);\n    return response;\n  } catch (error) {\n    alert(error);\n    return [];\n  }\n}\n\n// запрос обзоров для страницы кинофильма\nasync function getMoviesReviews(movie_id) {\n  try {\n    const url = { url: `movie/${movie_id}/reviews` };\n    const response = axios(url, movie_id);\n    return response;\n  } catch (error) {\n    alert(error);\n    return [];\n  }\n}\n\nconst api = {\n  getMoviesTrending,\n  getSerchMovies,\n  getMovieDetails,\n  getMovieCredits,\n  getMoviesReviews,\n};\n\nexport default api;\n","import React from 'react';\nimport { Link, useLocation, withRouter } from 'react-router-dom';\nimport api from '../api/movies-api';\n\nclass HomePage extends React.Component {\n  state = {\n    trending: [],\n    src: 'https://image.tmdb.org/t/p/w500',\n    location: useLocation,\n  };\n\n  componentDidMount() {\n    this.fetchTrending();\n  }\n\n  fetchTrending = () => {\n    api.getMoviesTrending().then(results => {\n      this.setState({ trending: [...results] });\n    });\n  };\n\n  render() {\n    const { trending, src } = this.state;\n    const { location } = this.props;\n\n    return (\n      <div className=\"container\">\n        <h2 className=\"page_title\"> Today trending movies </h2>\n        <ul className=\"movies_ul\">\n          {trending.map(({ id, poster_path, title, vote_average }) => (\n            <Link\n              key={id}\n              to={{\n                pathname: `/movies/${id}`,\n                state: { from: location.pathname },\n              }}\n            >\n              <li className=\"movies_li\">\n                <img\n                  className=\"movies_img\"\n                  src={`${src}${poster_path}`}\n                  alt={title}\n                />\n                <p className=\"movies_title\"> {title}</p>\n                <p className=\"movies_rating\">\n                  <span className=\"rating\">{vote_average}</span>\n                </p>\n              </li>\n            </Link>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(HomePage);\n"],"sourceRoot":""}